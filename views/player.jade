extends layout

block content
    style.
        video {
            top: 0px;
            right: 0px;
            bottom: 0px;
            left: 0px;
            max-height: 100%;
            max-width: 100%;
            margin: auto;
            object-fit: contain;
            height: 100%;
            width: 100%;
            background-color: black;
        }

        body {
            background-color: black;
            padding: 0px;
            margin: 0px;
        }

        h2, p, h4, h3 {
            color: white;
        }

        .site-logo {
            cursor: pointer;
            position: relative;
            right: 0px;
            text-align: right;
            margin: 0px;
            margin-right: 13px;
            color: #d8d8d8;
            padding: 0px;
            top: 5px;
        }

        .video-details {
            margin-top: -13px;
            margin-left: 15px;
        }

        .description {
            line-height:23px;
            font-family: serif;
            font-size: 44px;
            line-height: 80px;
        }

        .pulled-right {
            max-width: 500px;
            margin-right: 0px;
            width: 200px;
            position: relative;
            float: right;
            top: -6px;
        }

        .video-title {
            font-size: 58px;
            margin-top: 25px;
        }

        .hide-cursor {
            cursor: none;
        }

        .plyr {
            max-height: 94.6vh;
        }

        #back-button {
            font-size: 14px;
            margin-top: 12px;
        }

        #download-button {
            font-size: 14px;
            margin-top: 5px;
        }

        .upload-details-holder {
            /*height: 1300px;*/
        }

        .upload-details h4:not(.description) {
            font-size: 35px;
        }

        .vjs-text-track-display div div {
            font-size: 40px !important;
        }

        .video-js {
            max-height: 400px;
        }

        .bottomSection {
            padding-left: 20px;
        }

        .downloadLinks a {
            color: white;
        }

        .links div, .links p, .links a p {
            display: inline;
        }

        .links a p {
            margin-left: 10px;
        }

        .links {
            margin-bottom: 10px;
        }

        @media (min-width: 320px) {
            /* smartphones, portrait iPhone, portrait 480x320 phones (Android) */
        }

        @media (min-width: 480px) {
            /* smartphones, Android phones, landscape iPhone */
        }



        /** larger than this size **/
        @media (min-width: 320px) {

            .plyr__caption {
                font-size: 20px !important;
                line-height: 13px !important;
            }
        }

        @media (min-width: 801px) {

            .plyr__caption {
                font-size: 28px !important;
                line-height: 41px !important;;
            }
            /* tablet, landscape iPad, lo-res laptops ands desktops */
        }

        @media (min-width: 1025px) {
            /* big landscape tablets, laptops, and desktops */
        }

        /* not mobile */
        @media (min-width: 1281px) {
            .plyr__caption {
                font-size: 49px !important;
                line-height: 74px !important;
            }
            /* hi-res laptops and desktops */
        }

        @media (max-width: 900px) {
            .plyr__volume {
                display: none !important;
            }

            .plyr__time--current, .plyr__time--duration {
                font-size: 24px !important;
            }

            body {
                font-size: 28px;
            }

            .plyr__control svg {
                width: 53px !important;
                height: 53px !important;
            }


            button[data-plyr="language"], button[data-plyr="settings"] {
                font-size: 28px !important;
            }

            /* hi-res laptops and desktops */
        }


    div
        div.video-containing-div
            video#player(playsinline controls='' autoplay='true' name='media' preload="metadata")
                // file extension includes the .
                source(src=`${filePathWithoutExtension}${processingData.fileExtension}`)
                // TODO: replace with loop (has to fix on the backend)
                if languagesToLoop.length > 0
                    each loopLanguage in languagesToLoop
                        track(kind='captions' label=loopLanguage.name srclang=loopLanguage.languageCode src=`${filePathWithoutExtension}_${loopLanguage.name}.vtt` default='')
                    track(kind='captions' label=processingData.language srclang=processingData.languageCode src=`${filePathWithoutExtension}_${processingData.language}.vtt` default=true)
                else
                    track(kind='captions' label=processingData.language srclang=processingData.languageCode src=`${filePathWithoutExtension}.vtt` default=true)


    div.bottomSection
        div.downloadLinks
            div.startAnotherTranscription(style="max-width:191px;")
                a(target="_blank" href=`/`)
                    p Start Another Transcription

            // ORIGINAL LANGUAGE FILES
            if processingData.translatedLanguages.length > 1
                p Original Language:
            div.srtLinks.links
                p SRT (#{processingData.language})
                div
                    a(download href=`${filePathWithoutExtension}.srt`)
                        p Download
            div.vttLinks.links
                p VTT (#{processingData.language})
                div
                    a(href=`${filePathWithoutExtension}.vtt`)
                        p View
                div
                    a(download href=`${filePathWithoutExtension}.vtt`)
                        p Download

            div.txtLinks.links
                p TXT (#{processingData.language})
                div
                    a(download href=`${filePathWithoutExtension}.txt`)
                        div
                            a(href=`${filePathWithoutExtension}.txt`)
                                p View
                        div
                            a(download href=`${filePathWithoutExtension}.txt`)
                                p Download

            // TRANSLATED FILES //
            if processingData.translatedLanguages.length > 0
                p Translations:
            // translated VTT files
            each language in processingData.translatedLanguages
                div.links
                    p VTT (#{language})
                    div
                        a(download href=`${filePathWithoutExtension}_${language}.vtt`)
                            div
                                a(href=`${filePathWithoutExtension}_${language}.vtt`)
                                    p View
                            div
                                a(download href=`${filePathWithoutExtension}_${language}.vtt`)
                                    p Download
            div.links
                a(download href=`${filePathWithoutExtension}${processingData.fileExtension}`)
                    p(style="margin-left:0px") Download File


        div.fileDetails
            each property, value in processingData
                p #{value}: #{property}
                //p Filename: #{processingData.filename}

    script(src = 'https://cdn.plyr.io/3.7.2/plyr.js')
    link(rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/plyr/3.7.2/plyr.css' integrity='sha512-SwLjzOmI94KeCvAn5c4U6gS/Sb8UC7lrm40Wf+B0MQxEuGyDqheQHKdBmT4U+r+LkdfAiNH4QHrHtdir3pYBaw==' crossorigin='anonymous' referrerpolicy='no-referrer')
    script.
      l = console.log;
      let player;
      $(document).ready(function () {
        console.log("ready!");
        var controls =
          [
            'play-large', // The large play button in the center
            // 'restart', // Restart playback
            // 'rewind', // Rewind by the seek time (default 10 seconds)
            'play', // Play/pause playback
            // 'fast-forward', // Fast forward by the seek time (default 10 seconds)
            'volume', // Volume control
            'progress', // The progress bar and scrubber for playback and buffering
            'current-time', // The current time of playback
            'duration', // The full duration of the media
            'mute', // Toggle mute
            'captions', // Toggle captions
            'settings', // Settings menu
            // 'pip', // Picture-in-picture (currently Safari only)
            // 'airplay', // Airplay (currently Safari only)
            // 'download', // Show a download button with a link to either the current source or a custom URL you specify in your options
            'fullscreen'
          ];

        player = new Plyr('#player', {
          disableContextMenu: true,
          controls,
          captions: { active: true, language: 'auto', update: true },
          settings: ['captions']
        });

        l('captions');

        setTimeout(function(){
          const captionsIsPressed = $('button[data-plyr="captions"]')?.hasClass('plyr__control--pressed')

          if (!captionsIsPressed) {
            $('button[data-plyr="captions"]').click();
          }
        }, 200)



      });



