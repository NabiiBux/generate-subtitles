extends layout

block content
  style.
    body {
      background-color: rgb(22, 29, 29);
    }

    * {
      box-sizing: border-box;
    }

    .container {
      max-width: 500px;
      margin: 60px auto;
    }

    .container h1 {
      text-align: center;
      color: white;
    }

    form {
      background-color: white;
      padding: 30px;
    }

    form .input-group {
      margin-bottom: 15px;
    }

    form label {
      display: block;
      margin-bottom: 5px;
      margin-top: 12px;
    }

    form input {
      padding: 12px 20px;
      width: 100%;
      border: 1px solid #ccc;
    }

    .submit-btn {
      width: 100%;
      border: none;
      background: rgb(60, 57, 57);
      font-size: 18px;
      color: white;
      border-radius: 3px;
      padding: 20px;
      text-align: center;
      cursor: pointer;
    }

    #latestData, #progress, .downloadLink, #refreshButton, #timeEstimator, #startNewUpload, #processingData, #secondProcessingData {
      color: white;
      font-size: 24px;
      text-align: center;
    }

    #timeEstimator {
      font-size: 21px;
    }

    /*#srtDownloadLink, #vttDownloadLink, #txtDownloadLink {*/
    /*  display: none;*/
    /*}*/

    #finishedData {
      white-space: pre;
      text-align: left;
      font-size: 18px;
      color: white;
      margin-top: -18px;
      margin-bottom: 29px;
    }

    #refreshButton, #startNewUpload {
      cursor: pointer;
      text-decoration: underline;
      margin-top: 29px;
      display: none;
      font-size: 18px;
    }

    #startNewUpload {
      margin-top: 45px;
    }

    #processingData {
      display: none;
      white-space: pre;
      margin-bottom: 35px;
    }

    #secondProcessingData, #latestData {
      white-space: pre;
      display: none;
    }

    .downloadLink {
      color: white;
      font-size: 19px;
      text-align: center;
      margin-bottom: 10px;
    }

    #githubLogo {
      width: 100px;
      float: right;
    }

    #languageLabel, #modelLabel {
      cursor: pointer;
    }

  a(href='https://github.com/mayeaux/generate-subtitles' target='_blank')
    img#githubLogo(src='/images/inverted.png')

  .container
    h1#header File Upload
    form#form
      .input-group
        label(for='file') Select (or drop) file
        input#file(type='file')
        label#languageLabel Language (aka English)
        input#language(type='text' value=previousLanguage placeholder="Leave empty for Auto-Detect")
        label#modelLabel Model (aka medium)
        input#model(type='text' value=previousModel placeholder="Leave empty for medium")
      button.submit-btn(type='submit') Upload

    //DISPLAY DIFFERENT DATA
    p#progress
    p#timeEstimator
    p#latestData
    p#processingData
    p#secondProcessingData
    p#finishedData

    // kind of duplicated, not sure it's needed
    a#startNewUpload(onclick='(function(){ window.open(window.location.href, \'_blank\').focus(); })();') Start Another Transcription

    a.downloadLink#srtDownloadLink(href='#')

    a.downloadLink#vttDownloadLink(href='#')

    a.downloadLink#txtDownloadLink(href='#')

    a#refreshButton(onclick='(function(){ window.open(window.location.href, \'_blank\').focus(); })();') Start New Transcription

  script(src='//cdn.jsdelivr.net/npm/sweetalert2@11')
  script(src='https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.1/jquery.min.js' integrity='sha512-aVKKRRi/Q/YV+4mjoKBsE4x3H+BkegoM/em46NNlCqNTmUYADjBbeNefNxYV7giUp0VxICtqdrbqU7iVaeZNXA==' crossorigin='anonymous' referrerpolicy='no-referrer')

  script.
    l = console.log;

    $(document).ready(function () {
      // swal data with languages
      $("#languageLabel").on('click', function () {
        l('models');
        l(models);
        return Swal.fire({
          title: 'The following languages are valid',
          text: languages.join(' '),
          icon: 'question',
          confirmButtonText: 'Cool'
        })
      });

      // swal data with languages
      $("#modelLabel").on('click', function () {
        l('models');
        l(models);
        return Swal.fire({
          title: 'The following models are valid',
          text: models.join(' '),
          icon: 'question',
          confirmButtonText: 'Cool'
        })
      });

    });

    function unescapeHTML(escapedHTML) {
      return escapedHTML.replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&amp;/g, '&');
    }

    // had to do this because of the greater than thing (remove backslash)
    // otherwise could do const forHumans = #/{forHumans}
    eval(unescapeHTML(`#{forHumans}`));

    // l(forHumans(100));
    // TODO: pass from frontend
    const languagesString = 'Afrikaans,Albanian,Amharic,Arabic,Armenian,Assamese,Azerbaijani,Bashkir,Basque,Belarusian,Bengali,Bosnian,Breton,Bulgarian,Burmese,Castilian,Catalan,Chinese,Croatian,Czech,Danish,Dutch,English,Estonian,Faroese,Finnish,Flemish,French,Galician,Georgian,German,Greek,Gujarati,Haitian,Haitian Creole,Hausa,Hawaiian,Hebrew,Hindi,Hungarian,Icelandic,Indonesian,Italian,Japanese,Javanese,Kannada,Kazakh,Khmer,Korean,Lao,Latin,Latvian,Letzeburgesch,Lingala,Lithuanian,Luxembourgish,Macedonian,Malagasy,Malay,Malayalam,Maltese,Maori,Marathi,Moldavian,Moldovan,Mongolian,Myanmar,Nepali,Norwegian,Nynorsk,Occitan,Panjabi,Pashto,Persian,Polish,Portuguese,Punjabi,Pushto,Romanian,Russian,Sanskrit,Serbian,Shona,Sindhi,Sinhala,Sinhalese,Slovak,Slovenian,Somali,Spanish,Sundanese,Swahili,Swedish,Tagalog,Tajik,Tamil,Tatar,Telugu,Thai,Tibetan,Turkish,Turkmen,Ukrainian,Urdu,Uzbek,Valencian,Vietnamese,Welsh,Yiddish,Yoruba';
    const languages = languagesString.split(',');
    const modelsString = 'tiny.en,tiny,base.en,base,small.en,small,medium.en,medium,large';
    const models = modelsString.split(',');


    const previousModel = localStorage.getItem('model');
    const previousLanguage = localStorage.getItem('language');

    document.getElementById('model').value = previousModel;
    document.getElementById("language").value = previousLanguage;

    const ipAndPort = location.host;
    const randomNumber = Math.round(Math.random() * 1000000000000);

    // grab elements
    const form = document.getElementById("form");
    const progressDiv = document.getElementById('progress');
    const timeRemainingDiv = document.getElementById('timeEstimator');
    const header = document.getElementById('header')
    const refreshButton = document.getElementById('refreshButton');
    const latestData = document.getElementById('latestData');
    const file = document.getElementById("file");

    form.addEventListener("submit", submitForm);

    let uploadStarted = false;

    const nodeEnvironment = `#{nodeEnv}`

    function submitForm(e) {
      e.preventDefault();

      let language = document.getElementById("language").value;
      const model = document.getElementById("model").value;

      const formData = new FormData();

      const passedFile = file.files[0]

      if(!passedFile){
        return Swal.fire({
          title: 'You didn\'t pass a file',
          icon: 'error',
          confirmButtonText: 'Cool'
        })
      }

      if(nodeEnvironment === 'prod'){
        // TODO: change this to onchange
        if (passedFile.size > 100000000) {
          return Swal.fire({
            title: 'Please upload something smaller than 100MB, Cloudflare limit for now',
            icon: 'error',
            confirmButtonText: 'Cool'
          })
        }
      }



      function capitalize(s) {
        return s[0].toUpperCase() + s.slice(1);
      }

      // capitalize for people who can't follow specs
      language = language && capitalize(language);

      const existsAndNotValidLanguage = language && !languages.includes(language)

      if(existsAndNotValidLanguage){
        return Swal.fire({
          title: 'Can only use one of the following languages',
          text: languages,
          icon: 'error',
          confirmButtonText: 'Cool'
        })
      }

      const modelExistsAndNotValid = model && !models.includes(model);

      if (modelExistsAndNotValid) {
        return Swal.fire({
          title: 'Can only use one of the following models',
          text: models,
          icon: 'error',
          confirmButtonText: 'Cool'
        })
      }

      formData.append("file", passedFile);
      formData.append('language', language);
      formData.append('model', model);
      formData.append('websocketNumber', randomNumber);

      localStorage.setItem('model', model);
      localStorage.setItem('language', language);

      // Display the key/value pairs
      for (const pair of formData.entries()) {
        console.log(pair[0] + ': ' + pair[1]);
      }
      const fileName = document.getElementById('file').files[0].name;
      l(`filename: ${fileName}`)

      const httpProtocol = window.location.protocol;

      let httpPrepend;
      if (httpProtocol === "https:") {
        httpPrepend = "https";
      } else {
        httpPrepend = "http";
      }

      const uploadUrl = `${httpPrepend}://${ipAndPort}/file`;

      var ajax = new XMLHttpRequest();
      let originalDate, timeElapsedInSeconds, estimatedUploadTimeInSeconds, estimatedSecondsRemaining;

      /** TIME COUNTDOWN FUNCTIONALITY **/
      ajax.upload.addEventListener("progress", function(event){
        l(event);
        form.style.display = 'none';
        document.getElementById('startNewUpload').style.display = 'block';

        var percent = Math.round((event.loaded / event.total) * 100);
        progressDiv.innerHTML = `${percent}% uploaded`;

        const currentTime = new Date();
        timeElapsedInSeconds = Math.round((currentTime - originalDate) / 1000);
        estimatedUploadTimeInSeconds = Math.round(timeElapsedInSeconds * (100/percent));
        estimatedSecondsRemaining = estimatedUploadTimeInSeconds - timeElapsedInSeconds;

        // start up functionality to update estimate every second
        if(!uploadStarted){
          uploadStarted = true;
          originalDate = new Date();
          setInterval(function(){
            // TODO: not honoring newlines
            timeRemainingDiv.innerHTML = `[${timeElapsedInSeconds}/${estimatedUploadTimeInSeconds}s] ${forHumans(estimatedSecondsRemaining)} remaining`
          }, 1000)
        }
      }, false);

      ajax.addEventListener("load", function(res){
        l('hit the backend!');
        hitTheBackend = true;
        document.getElementById('processingData').style.display = 'block';
        document.getElementById('latestData').style.display = 'block';
        console.log(res)
        progressDiv.style.display = 'none';
        timeRemainingDiv.style.display = 'none';

        header.innerHTML = 'Processing..';
        document.getElementById('startNewUpload').style.marginTop = '29px';
      }, false);
      // TODO: implement these
      // ajax.addEventListener("error", errorHandler, false);
      // ajax.addEventListener("abort", abortHandler, false);
      ajax.open("POST", uploadUrl); //
      ajax.send(formData);
    }

    let placeInQueue = 0;

    /** WEBSOCKET CONNECTION **/
    const httpProtocol = window.location.protocol;

    let wssPrepend;
    if (httpProtocol === "https:") {
      wssPrepend = "wss";
    } else {
      wssPrepend = "ws";
    }

    const websocketConnection = new WebSocket(`${wssPrepend}://${ipAndPort}/${randomNumber}`);

    let myUploadStarted = false;
    let hitTheBackend = false;
    websocketConnection.onmessage = function (event) {
      const data = JSON.parse(event.data);

      console.log(event.data);

      /** WHEN WEBSOCKET SAYS COMPLETED **/
      if (data.status === 'Completed') {
        latestData.innerHTML = 'Congratulations, you\'re done!';

        document.getElementById('finishedData').innerHTML = data.detailsString;

        // create srt download link
        const srtDownloadLink = document.getElementById('srtDownloadLink')
        srtDownloadLink.target = "_blank"
        srtDownloadLink.href = data.urlSrt;
        srtDownloadLink.style.display = 'block';
        srtDownloadLink.innerHTML = `${data.filename}.srt`

        // create vtt download link
        const vttDownloadLink = document.getElementById('vttDownloadLink')
        vttDownloadLink.target = "_blank"
        vttDownloadLink.href = data.urlVtt;
        vttDownloadLink.style.display = 'block';
        vttDownloadLink.innerHTML = `${data.filename}.vtt`

        // create txt download link
        const txtDownloadLink = document.getElementById('txtDownloadLink')
        txtDownloadLink.href = data.urlTxt;
        txtDownloadLink.target = "_blank"
        txtDownloadLink.style.display = 'block';
        txtDownloadLink.innerHTML = `${data.filename}.txt`

        header.innerHTML = 'Transcription Completed';
        document.getElementById('processingData').style.display = 'none';

        // show refresh button
        refreshButton.style.display = 'block';

        // TODO: add two more download buttons

        l(data.url)

        document.getElementById('startNewUpload').style.display = 'none';

        websocketConnection.close()

      } else if (data.message === 'queue'){
        let amountOfPeopleInFront = data.placeInQueue;
        amountOfPeopleInFront = amountOfPeopleInFront + 1;
        if (amountOfPeopleInFront === 1) {
          latestData.innerHTML = `You're next up`;
        } else if(amountOfPeopleInFront > 1){
          latestData.innerHTML = `There are ${amountOfPeopleInFront} people ahead of you`;
        }

        if(amountOfPeopleInFront === 0){
          latestData.innerHTML = `Starting now...`;
        }

      } else if (data === 'finishedProcessing' && uploadStarted) {
        // placeInQueue = data.placeInQueue;
        const amountOfPeopleInFront = placeInQueue + 1;
        // TODO: hate how this is duped, so annoying
        if (amountOfPeopleInFront === 1) {
          latestData.innerHTML = `You're next up`;
        } else if(amountOfPeopleInFront > 1){
          latestData.innerHTML = `There are ${amountOfPeopleInFront} people ahead of you`;
        }

        if (amountOfPeopleInFront === 0) {
          latestData.innerHTML = `Starting now...`;
        }

      } else if (data.message === 'websocketData') {
        l('data');
        l(data);
        const myUpload = data.ownershipPerson === 'you';
        l('my upload');
        l(myUpload);
        const processNumber = data.serverNumber; // 1 || 2, really means process

        // by default let to 'latest processing'
        // TODO: this is misnamed
        let textToSay = `Latest processing data (process ${processNumber})`;
        if(myUpload){
          /** it's your upload **/
          // data is no longer relevant
          document.getElementById('secondProcessingData').style.display = 'none';
          myUploadStarted = true; // force this to true
          textToSay = `Your processing data`;
          latestData.style.display = 'none';
        }

        const eitherProcess = processNumber ===  1 || processNumber === 2;
        l('either process');
        l(eitherProcess);

        // TODO: need my upload finished? && !myUploadFinished
        if(eitherProcess && myUpload && hitTheBackend && myUploadStarted){
          l('found my data');
          document.getElementById('processingData').style.display = 'block';
          document.getElementById('processingData').innerHTML = `${textToSay}\n${data.processingData}`;
        }

        // TODO: this seems off
        // update the process 2 info if appropriate
        if (processNumber === 1 && !myUpload && !myUploadStarted && hitTheBackend) {
          l('getting process 1 data');
          document.getElementById('processingData').style.display = 'block';
          document.getElementById('processingData').innerHTML = `${textToSay}\n${data.processingData}`;
        }
        // update the process 2 info if appropriate
        if (processNumber === 2 && !myUpload && !myUploadStarted && hitTheBackend) {
          l('getting process 2 data');
          document.getElementById('secondProcessingData').style.display = 'block';
          document.getElementById('secondProcessingData').innerHTML = `${textToSay}\n${data.processingData}`;
        }

      } else if (data.message === 'fileDetails') {
        l('file details data');
        const niceDate = new Date().toString().replace(/GMT.*/g,"");
        const niceString = `startedAt: ${niceDate}`;
        document.getElementById('finishedData').innerHTML = data.fileDetails + niceString;
      } else {
        latestData.innerHTML = data;
      }
    };

    /** DRAG AND DROP FILES **/
    file.ondragover = file.ondragenter = function (evt) {
      evt.preventDefault();
    };

    file.ondrop = function (evt) {
      evt.preventDefault();

      // only add the first file
      let list = new DataTransfer();
      let firstPassedFile = evt.dataTransfer.files[0];
      list.items.add(firstPassedFile);

      if(evt?.dataTransfer?.files){
        file.files = list.files;

      } else {
        l('no files found');
      }
    };



